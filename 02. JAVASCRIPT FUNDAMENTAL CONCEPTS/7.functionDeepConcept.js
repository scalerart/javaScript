function doubleIt(num) {
    var result = num * 2;
    return result;
}
var first = doubleIt(5);
var second = doubleIt(50);
var total = first + second;
console.log(total);

function add(a, b) {
    var result = a + b;
    return result;
}
var sum = add(15, 17);
console.log(sum);
/*
Function ‡¶è‡¶∞ Deep Concept
1.  Function Scope
    Scope ‡¶Æ‡¶æ‡¶®‡ßá ‡¶ï‡ßã‡¶•‡¶æ‡ßü ‡¶ï‡ßã‡¶® ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá‡•§
        1.  Global Scope: ‡¶¨‡¶æ‡¶á‡¶∞‡ßá ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶∏‡¶¨ ‡¶ú‡¶æ‡ßü‡¶ó‡¶æ‡ßü ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§
        2.  Local Scope (Function Scope): ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶°‡¶ø‡¶´‡¶æ‡¶á‡¶® ‡¶ï‡¶∞‡¶æ ‡¶≠‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡ßü‡ßá‡¶¨‡¶≤ ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡ßá‡¶∞ ‡¶≠‡¶ø‡¶§‡¶∞‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡ßá‡•§

        üëâ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
    let globalVar = "I am Global";

    function test() {
        let localVar = "I am Local";
        console.log(globalVar); // ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
        console.log(localVar);  // ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
    }

    test();
    console.log(globalVar); // ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá
    console.log(localVar);  // Error: localVar is not defined

2.  Default Parameters
    ‡¶Ø‡¶¶‡¶ø function call ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü argument ‡¶®‡¶æ ‡¶¶‡¶æ‡¶ì, ‡¶§‡¶æ‡¶π‡¶≤‡ßá default parameter ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü‡•§

    üëâ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
        function greet(name = "Guest") {
            console.log("Hello " + name);
        }

        greet("Kadir");  // Hello Kadir
        greet();         // Hello Guest

3.  Recursion (Function ‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶≠‡ßá‡¶§‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶®‡¶ø‡¶ú‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ)
    Recursion ‡¶Æ‡¶æ‡¶®‡ßá function ‡¶®‡¶ø‡¶ú‡ßá‡¶á ‡¶®‡¶ø‡¶ú‡ßá‡¶ï‡ßá ‡¶ï‡¶≤ ‡¶ï‡¶∞‡ßá‡•§
    ‡¶è‡¶ü‡¶æ ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ ‡¶ó‡¶£‡¶ø‡¶§ ‡¶¨‡¶æ ‡¶≤‡ßÅ‡¶™‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡ßÉ‡¶§ ‡¶π‡ßü‡•§

    üëâ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£ (Factorial ‡¶¨‡ßá‡¶∞ ‡¶ï‡¶∞‡¶æ):
        function factorial(n) {
            if (n === 1) {
            return 1;
        }
            return n * factorial(n - 1);
        }
        console.log(factorial(5)); // 120

4.  Function Hoisting
    JavaScript ‡¶è normal function declaration ‡¶Ü‡¶ó‡ßá ‡¶•‡ßá‡¶ï‡ßá‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡ßç‡¶∏‡ßá‡¶∏ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡ßü (hoisting ‡¶π‡ßü)‡•§

    üëâ ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£:
        sayHello(); // ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶¨‡ßá

        function sayHello() {
            console.log("Hello!");
        }

‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ function expression ‡¶¨‡¶æ arrow function hoisting ‡¶π‡ßü ‡¶®‡¶æ‡•§
    sayHi(); // Error
    const sayHi = function() {
        console.log("Hi!");
    };

5.  Anonymous Function
    ‡¶Ø‡ßá function ‡¶è‡¶∞ ‡¶ï‡ßã‡¶®‡ßã ‡¶®‡¶æ‡¶Æ ‡¶•‡¶æ‡¶ï‡ßá ‡¶®‡¶æ, ‡¶§‡¶æ‡¶ï‡ßá anonymous function ‡¶¨‡¶≤‡ßá‡•§
    üëâ ‡¶Ö‡¶®‡ßá‡¶ï ‡¶∏‡¶Æ‡ßü event, callback ‡¶è ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶π‡ßü‡•§
        setTimeout(function() {
            console.log("This is anonymous function");
        }, 2000);
*/        